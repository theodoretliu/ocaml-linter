type token =
  | EOF
  | OPEN
  | CLOSE
  | LET
  | DOT
  | IN
  | REC
  | EQUALS
  | INTUNOP
  | INTBINOP
  | FLOATUNOP
  | FLOATBINOP
  | BOOLBINOP
  | COMPAREBINOP
  | CONS
  | NIL
  | APPEND
  | IF
  | THEN
  | ELSE
  | FUNCTION
  | RAISE
  | FAILWITH
  | ID of (string)
  | INT of (int)
  | FLOAT of (float)
  | TRUE
  | FALSE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Expr ;;
# 36 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* OPEN *);
  258 (* CLOSE *);
  259 (* LET *);
  260 (* DOT *);
  261 (* IN *);
  262 (* REC *);
  263 (* EQUALS *);
  264 (* INTUNOP *);
  265 (* INTBINOP *);
  266 (* FLOATUNOP *);
  267 (* FLOATBINOP *);
  268 (* BOOLBINOP *);
  269 (* COMPAREBINOP *);
  270 (* CONS *);
  271 (* NIL *);
  272 (* APPEND *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* FUNCTION *);
  277 (* RAISE *);
  278 (* FAILWITH *);
  282 (* TRUE *);
  283 (* FALSE *);
    0|]

let yytransl_block = [|
  279 (* ID *);
  280 (* INT *);
  281 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\003\000\
\006\000\004\000\006\000\007\000\004\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\008\000\004\000\005\000\006\000\007\000\024\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\032\000\033\000"

let yysindex = "\255\255\
\093\255\000\000\093\255\253\254\093\255\093\255\093\255\235\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\005\255\237\254\254\254\101\000\101\000\144\255\006\255\
\000\000\093\255\093\255\093\255\093\255\093\255\093\255\101\000\
\000\000\000\000\002\255\093\255\093\255\093\255\155\000\155\000\
\101\000\128\000\101\000\101\000\093\255\171\255\198\255\101\000\
\225\255\093\255\093\255\093\255\101\000\101\000\101\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\039\000\
\057\000\059\000\061\000\067\000\000\000\081\000\000\000\069\000\
\000\000\000\000\000\000\000\000\079\000\087\000\089\000"

let yygindex = "\000\000\
\000\000\047\000\099\000"

let yytablesize = 438
let yytable = "\001\000\
\025\000\024\000\019\000\035\000\036\000\003\000\034\000\004\000\
\045\000\038\000\000\000\000\000\005\000\026\000\006\000\027\000\
\028\000\029\000\030\000\020\000\031\000\007\000\000\000\000\000\
\008\000\009\000\009\000\010\000\011\000\012\000\013\000\014\000\
\000\000\000\000\000\000\000\000\013\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\014\000\018\000\000\000\021\000\022\000\023\000\000\000\000\000\
\012\000\000\000\011\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\021\000\000\000\000\000\000\000\
\039\000\040\000\041\000\042\000\043\000\044\000\019\000\000\000\
\018\000\000\000\046\000\047\000\048\000\000\000\017\000\000\000\
\020\000\000\000\000\000\049\000\000\000\003\000\000\000\004\000\
\053\000\054\000\055\000\017\000\005\000\017\000\006\000\017\000\
\017\000\017\000\000\000\000\000\000\000\007\000\000\000\000\000\
\008\000\009\000\000\000\010\000\011\000\012\000\013\000\014\000\
\000\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\000\000\000\000\000\000\017\000\017\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\003\000\000\000\004\000\000\000\017\000\017\000\017\000\005\000\
\026\000\006\000\027\000\028\000\029\000\030\000\000\000\031\000\
\007\000\037\000\000\000\008\000\009\000\000\000\010\000\011\000\
\012\000\013\000\014\000\003\000\000\000\004\000\000\000\050\000\
\000\000\000\000\005\000\026\000\006\000\027\000\028\000\029\000\
\030\000\000\000\031\000\007\000\000\000\000\000\008\000\009\000\
\000\000\010\000\011\000\012\000\013\000\014\000\003\000\000\000\
\004\000\000\000\000\000\000\000\000\000\005\000\026\000\006\000\
\027\000\028\000\029\000\030\000\000\000\031\000\007\000\000\000\
\051\000\008\000\009\000\000\000\010\000\011\000\012\000\013\000\
\014\000\003\000\000\000\004\000\000\000\052\000\000\000\000\000\
\005\000\026\000\006\000\027\000\028\000\029\000\030\000\000\000\
\031\000\007\000\000\000\000\000\008\000\009\000\000\000\010\000\
\011\000\012\000\013\000\014\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\004\000\000\000\000\000\000\000\000\000\
\005\000\026\000\006\000\027\000\028\000\029\000\030\000\000\000\
\031\000\007\000\000\000\000\000\008\000\009\000\000\000\010\000\
\011\000\012\000\013\000\014\000\009\000\000\000\000\000\009\000\
\000\000\000\000\000\000\009\000\000\000\009\000\013\000\009\000\
\010\000\013\000\000\000\010\000\009\000\009\000\000\000\010\000\
\000\000\010\000\014\000\010\000\000\000\014\000\013\000\013\000\
\010\000\010\000\012\000\000\000\011\000\012\000\015\000\011\000\
\000\000\015\000\014\000\014\000\016\000\000\000\021\000\016\000\
\000\000\021\000\012\000\012\000\011\000\011\000\015\000\015\000\
\019\000\000\000\018\000\019\000\016\000\016\000\021\000\021\000\
\017\000\000\000\020\000\017\000\000\000\020\000\000\000\000\000\
\019\000\019\000\018\000\018\000\000\000\003\000\000\000\004\000\
\017\000\017\000\020\000\020\000\005\000\026\000\006\000\027\000\
\028\000\029\000\030\000\000\000\031\000\007\000\000\000\000\000\
\008\000\009\000\000\000\010\000\011\000\012\000\013\000\014\000\
\003\000\000\000\004\000\000\000\000\000\000\000\000\000\005\000\
\026\000\006\000\027\000\028\000\000\000\030\000\000\000\031\000\
\007\000\000\000\000\000\008\000\009\000\000\000\010\000\011\000\
\012\000\013\000\014\000\003\000\000\000\004\000\000\000\000\000\
\000\000\000\000\005\000\000\000\006\000\000\000\028\000\000\000\
\030\000\000\000\031\000\007\000\000\000\000\000\008\000\009\000\
\000\000\010\000\011\000\012\000\013\000\014\000"

let yycheck = "\001\000\
\000\000\023\001\006\001\023\001\007\001\001\001\002\001\003\001\
\007\001\004\001\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\023\001\016\001\017\001\255\255\255\255\
\020\001\021\001\000\000\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
\000\000\003\000\255\255\005\000\006\000\007\000\255\255\255\255\
\000\000\255\255\000\000\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\000\000\255\255\255\255\255\255\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\255\255\
\000\000\255\255\036\000\037\000\038\000\255\255\000\000\255\255\
\000\000\255\255\255\255\045\000\255\255\001\001\255\255\003\001\
\050\000\051\000\052\000\001\000\008\001\003\000\010\001\005\000\
\006\000\007\000\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\026\000\027\000\028\000\029\000\
\030\000\031\000\255\255\255\255\255\255\255\255\036\000\037\000\
\038\000\255\255\255\255\255\255\255\255\255\255\255\255\045\000\
\001\001\255\255\003\001\255\255\050\000\051\000\052\000\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\255\255\255\255\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\001\001\255\255\
\003\001\255\255\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\255\255\
\019\001\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\002\001\255\255\255\255\005\001\
\255\255\255\255\255\255\009\001\255\255\011\001\002\001\013\001\
\002\001\005\001\255\255\005\001\018\001\019\001\255\255\009\001\
\255\255\011\001\002\001\013\001\255\255\005\001\018\001\019\001\
\018\001\019\001\002\001\255\255\002\001\005\001\002\001\005\001\
\255\255\005\001\018\001\019\001\002\001\255\255\002\001\005\001\
\255\255\005\001\018\001\019\001\018\001\019\001\018\001\019\001\
\002\001\255\255\002\001\005\001\018\001\019\001\018\001\019\001\
\002\001\255\255\002\001\005\001\255\255\005\001\255\255\255\255\
\018\001\019\001\018\001\019\001\255\255\001\001\255\255\003\001\
\018\001\019\001\018\001\019\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\255\255\255\255\
\020\001\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\001\001\255\255\003\001\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\255\255\014\001\255\255\016\001\
\017\001\255\255\255\255\020\001\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\001\001\255\255\003\001\255\255\255\255\
\255\255\255\255\008\001\255\255\010\001\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001"

let yynames_const = "\
  EOF\000\
  OPEN\000\
  CLOSE\000\
  LET\000\
  DOT\000\
  IN\000\
  REC\000\
  EQUALS\000\
  INTUNOP\000\
  INTBINOP\000\
  FLOATUNOP\000\
  FLOATBINOP\000\
  BOOLBINOP\000\
  COMPAREBINOP\000\
  CONS\000\
  NIL\000\
  APPEND\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUNCTION\000\
  RAISE\000\
  FAILWITH\000\
  TRUE\000\
  FALSE\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 29 "parser.mly"
                 ( _1 )
# 270 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expnoapp) in
    Obj.repr(
# 32 "parser.mly"
                 ( App(_1, _2) )
# 278 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expnoapp) in
    Obj.repr(
# 33 "parser.mly"
             ( _1 )
# 285 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 36 "parser.mly"
             ( Int _1 )
# 292 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 37 "parser.mly"
               ( Float _1 )
# 299 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
              ( Bool true )
# 305 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
               ( Bool false )
# 311 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 40 "parser.mly"
            ( Var _1 )
# 318 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 41 "parser.mly"
                       ( Binop(IntBinop, _1, _3) )
# 326 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 42 "parser.mly"
                        ( Binop(FloatBinop, _1, _3) )
# 334 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 43 "parser.mly"
                          ( Binop(CompareBinop, _1, _3) )
# 342 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 44 "parser.mly"
                        ( Binop(BoolBinop, _1, _3) )
# 350 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 46 "parser.mly"
                     ( Unop(IntUnop, _2) )
# 357 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 47 "parser.mly"
                     ( Unop(FloatUnop, _2) )
# 364 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 49 "parser.mly"
                     ( Binop(Cons, _1, _3) )
# 372 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 50 "parser.mly"
                      ( Binop(Append, _1, _3) )
# 380 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 52 "parser.mly"
                               ( Conditional(_2, _4, _6) )
# 389 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 53 "parser.mly"
                        ( Let(_2, _4) )
# 397 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 54 "parser.mly"
                             ( LetIn(_2, _4, _6) )
# 406 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 55 "parser.mly"
                                ( LetRec(_3, _5, _7) )
# 415 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 56 "parser.mly"
                         ( Fun(_2, _4) )
# 423 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
               ( Raise )
# 429 "parser.ml"
               : 'expnoapp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 58 "parser.mly"
                     ( _2 )
# 436 "parser.ml"
               : 'expnoapp))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
;;
